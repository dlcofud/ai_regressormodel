{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM/mHslxgOBqqAatfmWOo9T"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard"},"cells":[{"cell_type":"markdown","source":["https://learn.microsoft.com/ko-kr/azure/machine-learning/v1/how-to-auto-train-models-v1"],"metadata":{"id":"71NYqwIT2IQL"}},{"cell_type":"code","source":["!sudo apt-get install -y fonts-nanum\n","!sudo fc-cache -fv] #] 생략 가능\n","!rm ~/.cache/matplotlib -rf"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iABFLVpsoWfM","executionInfo":{"status":"ok","timestamp":1669822105700,"user_tz":-540,"elapsed":12293,"user":{"displayName":"cr l","userId":"11249789634447088332"}},"outputId":"89803255-f36f-4111-a16d-633a152e8fff"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","The following package was automatically installed and is no longer required:\n","  libnvidia-common-460\n","Use 'sudo apt autoremove' to remove it.\n","The following NEW packages will be installed:\n","  fonts-nanum\n","0 upgraded, 1 newly installed, 0 to remove and 5 not upgraded.\n","Need to get 9,604 kB of archives.\n","After this operation, 29.5 MB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu bionic/universe amd64 fonts-nanum all 20170925-1 [9,604 kB]\n","Fetched 9,604 kB in 3s (3,812 kB/s)\n","debconf: unable to initialize frontend: Dialog\n","debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76, <> line 1.)\n","debconf: falling back to frontend: Readline\n","debconf: unable to initialize frontend: Readline\n","debconf: (This frontend requires a controlling tty.)\n","debconf: falling back to frontend: Teletype\n","dpkg-preconfigure: unable to re-open stdin: \n","Selecting previously unselected package fonts-nanum.\n","(Reading database ... 123991 files and directories currently installed.)\n","Preparing to unpack .../fonts-nanum_20170925-1_all.deb ...\n","Unpacking fonts-nanum (20170925-1) ...\n","Setting up fonts-nanum (20170925-1) ...\n","Processing triggers for fontconfig (2.12.6-0ubuntu2) ...\n","fc-cache: invalid option -- ']'\n","usage: fc-cache [-EfrsvVh] [-y SYSROOT] [--error-on-no-fonts] [--force|--really-force] [--sysroot=SYSROOT] [--system-only] [--verbose] [--version] [--help] [dirs]\n","Build font information caches in [dirs]\n","(all directories in font configuration by default).\n","\n","  -E, --error-on-no-fonts  raise an error if no fonts in a directory\n","  -f, --force              scan directories with apparently valid caches\n","  -r, --really-force       erase all existing caches, then rescan\n","  -s, --system-only        scan system-wide directories only\n","  -y, --sysroot=SYSROOT    prepend SYSROOT to all paths for scanning\n","  -v, --verbose            display status information while busy\n","  -V, --version            display font config version and exit\n","  -h, --help               display this help and exit\n"]}]},{"cell_type":"code","source":["# connect google drive\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"p7mR5P-zFryO","executionInfo":{"status":"ok","timestamp":1669822137764,"user_tz":-540,"elapsed":32070,"user":{"displayName":"cr l","userId":"11249789634447088332"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d0d4ff0a-f41c-475d-f2a1-fa4cf334a3c2"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# 데이터를 불러오고 살펴보기 위한 pandas 라이브러리\n","import pandas as pd\n","import numpy as np\n","\n","# 시각화를 위한 라이브러리\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# 한글 폰트를 사용하기 위한 코드\n","plt.rc('font', family='NanumBarunGothic')"],"metadata":{"id":"6KWzWFhuomgW","executionInfo":{"status":"ok","timestamp":1669822139488,"user_tz":-540,"elapsed":1731,"user":{"displayName":"cr l","userId":"11249789634447088332"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# 태양광 발전량 data 파일이 저장된 경로를 현재 위치로 설정\n","%cd '/content/drive/MyDrive/태양광'"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZU-02KKgo30s","executionInfo":{"status":"ok","timestamp":1669822139489,"user_tz":-540,"elapsed":7,"user":{"displayName":"cr l","userId":"11249789634447088332"}},"outputId":"247578ec-f710-432a-b9f7-32f1653287d6"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/태양광\n"]}]},{"cell_type":"code","source":["# 데이터를 불러오고 살펴보기 위한 pandas 라이브러리\n","import pandas as pd\n","\n","# train 데이터 불러오기\n","train = pd.read_csv('./train.csv')\n","\n","# test 데이터 불러오기\n","test = pd.read_csv('./test.csv')\n","\n","# sample_submission 불러오기\n","sample_submission = pd.read_csv('./sample_submission.csv')\n","\n","train = (train\n"," .assign( SUN = lambda df: train['DHI'] + train['DNI'] )\n"," )\n","\n","test = (test\n","    .assign( SUN = lambda df: test['DHI'] + test['DNI'] )\n"," )"],"metadata":{"id":"LAQMvNhYossS","executionInfo":{"status":"ok","timestamp":1669822140109,"user_tz":-540,"elapsed":625,"user":{"displayName":"cr l","userId":"11249789634447088332"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["\n","train = (train\n"," .assign( SS = lambda df: train['SUN'] + train['T'] )\n"," )\n","\n","test = (test\n","    .assign( SS = lambda df: test['SUN'] + test['T'] )\n"," )"],"metadata":{"id":"wnr4c_Yoo06q","executionInfo":{"status":"ok","timestamp":1669822140109,"user_tz":-540,"elapsed":6,"user":{"displayName":"cr l","userId":"11249789634447088332"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["\n","train = (train\n"," .assign( DRH = lambda df: train['DNI'] +  ( -1 * train['RH'] ) )\n"," )\n","\n","test = (test\n"," .assign( DRH = lambda df: test['DNI'] +  ( -1 * test['RH'] ) )\n"," )\n","train = (train\n"," .assign( DNIT = lambda df: train['DNI'] +  ( train['T'] ) )\n"," )\n","\n","test = (test\n"," .assign( DNIT = lambda df: test['DNI'] +  ( test['T'] ) )\n"," )"],"metadata":{"id":"ssk1HOBQo8DW","executionInfo":{"status":"ok","timestamp":1669822140110,"user_tz":-540,"elapsed":6,"user":{"displayName":"cr l","userId":"11249789634447088332"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["train = train.drop(columns=['ID','WS','RH'])\n","test = test.drop(columns=['ID','WS','RH'])"],"metadata":{"id":"0etFyBwlo8Iw","executionInfo":{"status":"ok","timestamp":1669822140111,"user_tz":-540,"elapsed":6,"user":{"displayName":"cr l","userId":"11249789634447088332"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["x_train = train.drop(columns=['TARGET'])\n","y_train = train['TARGET']"],"metadata":{"id":"pkagJ8GgpTat","executionInfo":{"status":"ok","timestamp":1669822141536,"user_tz":-540,"elapsed":1431,"user":{"displayName":"cr l","userId":"11249789634447088332"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["print(train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8ez-UpUa_MnU","executionInfo":{"status":"ok","timestamp":1669822141537,"user_tz":-540,"elapsed":5,"user":{"displayName":"cr l","userId":"11249789634447088332"}},"outputId":"ed56b102-d7df-40e2-b37e-63a3223707ec"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["          DHI       DNI         T     TARGET       SUN        SS       DRH  \\\n","0    0.315650  0.885087 -0.106409  33.659014  1.200738  1.094329  1.448541   \n","1    0.075239  0.756084  0.317479  20.747731  0.831323  1.148801  1.786385   \n","2    0.148714  0.628092  0.411156  18.263065  0.776807  1.187962  1.818221   \n","3    0.821308  0.283800  1.308111  21.072718  1.105108  2.413219  0.501849   \n","4    0.174578  0.592866 -0.312498  16.076963  0.767443  0.454945  0.305931   \n","..        ...       ...       ...        ...       ...       ...       ...   \n","725  0.501543  0.642224 -0.094699  25.604709  1.143767  1.049068  1.861573   \n","726  0.082733  0.774102 -0.563083  20.438856  0.856835  0.293752  1.386880   \n","727  0.587950  0.385512  0.839727  21.876819  0.973462  1.813189 -0.908961   \n","728  0.816605  0.195044  0.811624  17.209349  1.011649  1.823273 -1.218538   \n","729  0.486995  0.588857  0.317479  26.987259  1.075852  1.393331  1.011264   \n","\n","         DNIT  \n","0    0.778679  \n","1    1.073563  \n","2    1.039248  \n","3    1.591911  \n","4    0.280368  \n","..        ...  \n","725  0.547525  \n","726  0.211019  \n","727  1.225239  \n","728  1.006668  \n","729  0.906336  \n","\n","[730 rows x 8 columns]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import tensorflow as tf"],"metadata":{"id":"8KMSqYK2qA1M","executionInfo":{"status":"ok","timestamp":1669822143643,"user_tz":-540,"elapsed":2109,"user":{"displayName":"cr l","userId":"11249789634447088332"}}},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":["시비걸면 \n","basline에 from sklearn.ensemble import RandomForestRegressor라고 되어있는데\n","왜 linermodel은 안되냐고 따지기\n","\n","\n","+제출할때는 아래 파일의 코드 보고 바꿔서 제출하기"],"metadata":{"id":"tbQT2VXbW9q7"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.kernel_approximation import RBFSampler\n","from sklearn.linear_model import LassoLarsCV\n","from sklearn.model_selection import train_test_split\n","from sklearn.pipeline import make_pipeline\n","from sklearn.preprocessing import RobustScaler\n","from sklearn.mixture import GaussianMixture\n","\n","# NOTE: Make sure that the outcome column is labeled 'target' in the data file\n","# Average CV score on the training set was: -0.9982408862039829\n","exported_pipeline = make_pipeline(\n","    RobustScaler(),\n","    RBFSampler(gamma=0.25),\n","    LassoLarsCV(normalize=True)\n",")\n","\n","exported_pipeline.fit(x_train,y_train)\n","results = exported_pipeline.predict(test)\n"],"metadata":{"id":"S6CPoNF6A96M","executionInfo":{"status":"ok","timestamp":1669822439003,"user_tz":-540,"elapsed":1205,"user":{"displayName":"cr l","userId":"11249789634447088332"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["results"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5-uyDAE7D-pA","executionInfo":{"status":"ok","timestamp":1669822439004,"user_tz":-540,"elapsed":6,"user":{"displayName":"cr l","userId":"11249789634447088332"}},"outputId":"bce1d1bf-0bc0-4d4d-9a1c-623dd51b79ca"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([17.44688019, 33.88112337, 11.7462264 , 23.4760387 , 20.78796353,\n","       16.00158203, 24.56804723, 16.86082591, 14.76406185, 33.27546789,\n","       14.2429461 , 11.44999856, 28.23758086, 21.05416732,  9.46882819,\n","       10.94304746,  6.99694998, 13.34252831, 23.75328747,  9.86188344,\n","       10.24224469, 28.49365028, 14.87430837, 26.58536448, 22.40367557,\n","       18.83349656, 21.52545686, 14.40698814, 26.11312055, 28.35017277,\n","        8.01866082, 33.61783236, 12.01584008, 31.15044081, 15.29661191,\n","       23.55787207, 18.07105321,  6.39404808,  9.80652588, 22.91202453,\n","       15.80741589, 17.11067908, 22.83066301, 11.55314747, 31.53839389,\n","       30.20809555, 11.05125453, 24.11093101, 18.71236097, 15.98438913,\n","       14.01329423, 18.36767305, 22.74686208, 19.3302436 , 34.31063236,\n","       20.95345514, 26.30558283, 28.41151638, 18.75225182, 11.57567675,\n","        6.29169104, 34.37192059, 15.54660762, 17.94117887, 21.23682899,\n","       17.6597263 , 24.07341276, 21.03033318, 12.57958098, 23.05444537,\n","       17.21980573, 18.76370706,  9.81883096, 31.65909082, 16.96270826,\n","       10.6139236 , 33.27965477, 10.25203747, 13.48683318, 18.46737801,\n","       17.47175791, 35.15003432, 13.48847959, 19.08872192,  6.56902321,\n","       23.20453309, 20.91290059, 13.83170104, 17.87875675, 20.91531033,\n","       12.45337183, 26.5251281 , 10.05115751, 11.74074421, 27.75907737,\n","       12.15259033,  4.51639625, 23.09007353,  9.35361229, 10.13310884,\n","       14.74974284, 12.98673378, 31.07466009, 16.69456698, 22.11408998,\n","       24.6035074 , 18.92052907, 25.86678904, 11.04938467, 29.26154137,\n","        6.30760758, 29.52798406,  9.87545198,  8.49482313, 11.04648752,\n","       17.24889702,  5.81678942, 12.83252892,  6.57768445,  2.84725871,\n","       13.60602173, 19.38836337, 10.54504674, 21.7896328 ,  6.74201142,\n","       20.02739002, 25.46350248, 16.89976725, 15.92696885,  7.52169858,\n","       30.57660553, 26.20672314,  5.51223977, 22.71440729,  5.49757113,\n","        7.32576156,  7.79865375, 19.43904536,  6.27409488, 22.37202121,\n","       17.36702303, 22.45739778, 17.78023276, 18.88344117, 27.98863896,\n","       10.82725402,  9.47033234, 14.07509596, 23.23584459, 12.77421393,\n","       28.16821653,  9.2716426 , 13.07084364, 19.22808285, 11.41827437,\n","       18.35116408, 16.73232333,  8.55751232, 27.74095842, 16.1895375 ,\n","        6.91342554, 20.72513779, 24.7608536 , 24.6780285 , 22.14679848,\n","        6.33190622, 11.51545297, 11.44444333,  2.90670008, 25.72403191,\n","       22.19861248,  4.25695331,  9.85673081, 20.96126466, 33.62247772,\n","       17.63514384, 20.36634207,  5.68167633, 26.00592281, 19.43724361,\n","       26.50555091, 18.47740114, 14.04852316,  9.34854399, 11.4688629 ,\n","       26.70583619, 21.0931443 , 27.28385207, 26.86427251, 26.8555995 ,\n","       33.35536214, 10.04504453, 17.26263334, 16.11023135, 21.76774687,\n","        7.17515775, 28.11791655, 14.86153818, 27.32985433, 15.05132106,\n","       26.61269294, 20.3676116 , 16.02662012, 23.788083  , 30.52516751,\n","       12.5300707 , 11.70023471, 26.1473681 ,  5.07096649, 24.88448106,\n","       16.46966027,  7.34419125,  8.16637193, 17.21925641, 23.94669475,\n","        6.52298921, 28.37196442, 12.45088641, 23.30347179, 20.62617039,\n","        7.40713001, 31.30039667, 16.00007149, 21.37990953,  9.59533578,\n","        2.3165062 ,  8.10405666, 12.61220987, 27.03722751, 23.61838544,\n","        7.90952946, 22.0155823 , 12.17922729, 14.10752175, 10.21472048,\n","        6.03292954,  8.18382443, 20.84968104, 26.54050215, 16.31719811,\n","       27.19382888, 14.79226945, 19.01574179, 13.04246555, 13.57356606,\n","       20.57338736, 15.11830309, 23.19488297, 13.61293228, 14.58791411,\n","       24.88282477, 11.80858799, 27.66258331,  4.07447418, 15.56425541,\n","       22.04345972, 16.3008885 ,  3.23978628,  3.42143128, 27.18523365,\n","       14.88940072, 17.56051965, 24.21908787, 12.68747338, 21.84035354,\n","       17.95385998, 11.7370557 , 24.65621263, 19.88924346, 27.81000487,\n","       12.50549212,  8.87627781,  9.0434851 , 26.26538395, 35.57664575,\n","       17.6551736 ,  3.98352858, 18.16400335,  1.93906934, 20.97229537,\n","       31.17029466,  6.0509704 , 13.73398962, 19.15809386, 11.96820927,\n","       35.56455308,  8.3067245 ,  9.23684546, 24.64279879, 19.64259107,\n","       22.81736904, 14.81752162,  7.87390877, 17.72813501, 26.04968118,\n","       11.96228421, 11.1376431 , 18.8475541 , 10.8544007 , 10.38592438,\n","       27.32404254, 16.57555319, 35.56334532, 22.33087501, 22.85085872,\n","       12.4206707 , 21.41238713,  9.64163855, 13.64096632, 17.4715682 ,\n","       23.08243268, 21.19963322, 21.28418839, 17.21236838, 19.19041189,\n","       17.4589305 , 18.85337693,  5.64921325, 26.39780023, 24.2438326 ,\n","       16.15879905, 12.47746331, 14.27524146, 18.39904226, 14.8685851 ,\n","        8.01204014, 12.36087466, 21.40152202, 28.04380048, 21.91208812,\n","       20.0951236 , 12.13124267, 10.62604919, 33.1945454 ,  4.88362333,\n","       34.00625269, 32.48724155, 21.40717457, 11.34675606, 29.31838788,\n","       31.36080249, 28.89422651,  5.36519812, 24.11763686,  7.00217887,\n","       12.39144073, 28.90828355, 30.09493217, 10.44719121, 29.71555397,\n","       20.30000974, 24.36772884, 20.96365738, 17.8288667 , 23.65456687,\n","        9.51050914, 13.16041037, 25.58983001, 14.31049432, 15.50887631,\n","       12.6100067 , 12.23594784,  9.29242924, 11.1013605 , 18.18257951])"]},"metadata":{},"execution_count":32}]}]}